@page "/categoria/create"
@using Microsoft.AspNetCore.Components.Forms
@using Services.Services
@using Services.ViewModels
@using SistemaGestion.Utils
@inject CategoriaService CategoriaService
@inject SubCategoriaService SubCategoriaService

<h3>@(categoria.Id == 0 ? "Nueva Categoría" : "Editar Categoría")</h3>

<EditForm Model="@categoria" OnValidSubmit="GuardarAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-8 mb-3">
            <label class="form-label">Descripción</label>
            <InputText class="form-control" @bind-Value="categoria.Descripcion" />
            <ValidationMessage For="@(() => categoria.Descripcion)" />
        </div>

        <div class="col-md-4 mb-3">
            <label class="form-label">Código</label>
            <InputText class="form-control" @bind-Value="categoria.Codigo" />
            <ValidationMessage For="@(() => categoria.Codigo)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>

    <hr />
    <h5>Subcategorías de esta categoría</h5>

    @if (categoria.Id == 0)
    {
        <p class="text-muted">Guarde primero la categoría antes de agregar subcategorías.</p>
    }
    else if (subCategorias == null)
    {
        <p>Cargando subcategorías...</p>
    }
    else if (!subCategorias.Any())
    {
        <p>No hay subcategorías cargadas para esta categoría.</p>
    }
    else
    {
        <table class="table table-striped table-bordered mt-2">
            <thead class="table-light">
                <tr>
                    <th>Descripción</th>
                    <th>Código</th>
                    <th style="width: 120px;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in subCategorias)
                {
                    <tr>
                        <td>@s.Descripcion</td>
                        <td>@s.Codigo</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarSubcategoria(s.Id)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (categoria.Id != 0)
    {
        <div class="mt-3">
            <h6>Agregar nueva subcategoría</h6>
            <div class="row">
                <div class="col-md-6 mb-2">
                    <InputText class="form-control" placeholder="Descripción" @bind-Value="nuevaSub.Descripcion" />
                </div>
                <div class="col-md-4 mb-2">
                    <InputText class="form-control" placeholder="Código" @bind-Value="nuevaSub.Codigo" />
                </div>
                <div class="col-md-2 mb-2">
                    <button class="btn btn-success w-100" @onclick="AgregarSubcategoria">Agregar</button>
                </div>
            </div>
        </div>
    }



</EditForm>

@code {
    [Parameter] public CategoriaViewModel? CategoriaExistente { get; set; }

    private CategoriaViewModel categoria = new();

    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    protected override void OnParametersSet()
    {
        if (CategoriaExistente != null)
        {
            categoria = new CategoriaViewModel
                {
                    Id = CategoriaExistente.Id,
                    Descripcion = CategoriaExistente.Descripcion,
                    Codigo = CategoriaExistente.Codigo
                };
        }
    }

    private async Task GuardarAsync()
    {
        if (categoria.Id == 0)
            await CategoriaService.CreateAsync(categoria);
        else
            await CategoriaService.UpdateAsync(categoria);

        await OnSaved.InvokeAsync();
    }

    private async Task Cancelar()
    {
        await OnCancel.InvokeAsync();
    }

    private List<SubCategoriaViewModel> subCategorias = new();
    private SubCategoriaViewModel nuevaSub = new();

    protected override async Task OnParametersSetAsync()
    {
        // Si estás editando, cargá las subcategorías
        if (CategoriaExistente != null)
        {
            categoria = new CategoriaViewModel
                {
                    Id = CategoriaExistente.Id,
                    Descripcion = CategoriaExistente.Descripcion,
                    Codigo = CategoriaExistente.Codigo
                };

            subCategorias = (await SubCategoriaService.GetByCategoriaIdAsync(categoria.Id)).ToList();
        }
    }

    private async Task AgregarSubcategoria()
    {
        if (string.IsNullOrWhiteSpace(nuevaSub.Descripcion))
            return;

        nuevaSub.CategoriaId = categoria.Id;
        await SubCategoriaService.CreateAsync(nuevaSub);
        nuevaSub = new SubCategoriaViewModel();

        subCategorias = (await SubCategoriaService.GetByCategoriaIdAsync(categoria.Id)).ToList();
    }

    private async Task EliminarSubcategoria(int id)
    {
        await SubCategoriaService.DeleteAsync(id);
        subCategorias = (await SubCategoriaService.GetByCategoriaIdAsync(categoria.Id)).ToList();
    }

}
