@page "/productos/index"
@using SistemaGestion
@attribute [StreamRendering]
@inject Services.ProductoService productoService

<PageTitle>PRODUCTOS</PageTitle>

<button class="btn btn-success btn-sm mb-3" @onclick="AbrirModal">Nuevo producto</button>

<!-- Modal -->
<div class="modal fade show @(showModal ? "d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.7);">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(modoEdicion ? "Editar Producto" : "Crear Producto")</h5>
                <button type="button" class="btn-close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                <Create ProductoExistente="productoSeleccionado"
                        OnSaved="ProductoGuardado"
                        OnCancel="CerrarModal" />
            </div>
        </div>
    </div>
</div>

<table class="table">
    <thead class="table-dark">
        <tr>
            <th>Descripción</th>
            <th>Costo ($AR)</th>
            <th>Costo (USD)</th>
            <th>Valor ($AR)</th>
            <th>Valor (USD)</th>
            <th>Fecha de Compra</th>
            <th>Dólar al Momento</th>
            <th>Fecha de Ingreso</th>
            <th>Cliente/Proveedor</th>
            <th>Subcategoría</th>
            <th>Cantidad</th>
            <th style="width:130px;">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (productos == null)
        {
            <tr>
                <td colspan="12" class="text-center">Cargando productos...</td>
            </tr>
        }
        else if (!productos.Any())
        {
            <tr>
                <td colspan="12" class="text-center">No hay productos cargados.</td>
            </tr>
        }
        else
        {
            @foreach (var p in productos)
            {
                <tr>
                    <td>@p.Descripcion</td>
                    <td>@p.CostoPesos?.ToString("N2")</td>
                    <td>@p.CostoDolar?.ToString("N2")</td>
                    <td>@p.ValorPesos?.ToString("N2")</td>
                    <td>@p.ValorDolar?.ToString("N2")</td>
                    <td>@p.FechaCompra?.ToShortDateString()</td>
                    <td>@p.ValorDolarMomentoCompra</td>
                    <td>@p.FechaIngreso?.ToShortDateString()</td>
                    <td>@p.ClienteProveedorId</td>
                    <td>@p.SubCategoriaId</td>
                    <td>@p.Cantidad</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditarProducto(p.Id)">
                            <i class="bi bi-pencil-square"></i> Editar
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(p.Id)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
<!-- Modal de confirmación -->
<div class="modal fade show @(showConfirmModal ? "d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirmar eliminación</h5>
                <button type="button" class="btn-close" @onclick="CancelarEliminacion"></button>
            </div>
            <div class="modal-body">
                <p>¿Seguro que desea eliminar el producto <strong>@productoDescripcionAEliminar</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelarEliminacion">Cancelar</button>
                <button class="btn btn-danger" @onclick="ConfirmarEliminacion">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<footer class="text-muted w-100" style="
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
    height: 38px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.85rem;
">
    <div class="d-flex align-items-center gap-4 flex-wrap text-secondary">
        <span>💵 <strong>Compra oficial:</strong> $@compraOficial?.ToString("N2")</span>
        <span>💸 <strong>Venta oficial:</strong> $@ventaOficial?.ToString("N2")</span>
        <span>💸 <strong>Compra blue:</strong> $@compraBlue?.ToString("N2")</span>
        <span>💸 <strong>Venta blue:</strong> $@ventaBlue?.ToString("N2")</span>
        <span>⏰ @DateTime.Now.ToString("HH:mm")</span>
    </div>
</footer>

@code {
    private IEnumerable<ProductoViewModel> productos;
    private DolarData? infoDolar;
    private bool showModal = false;
    private bool modoEdicion = false;
    private ProductoViewModel? productoSeleccionado;
    private bool showConfirmModal = false;
    private int productoIdAEliminar;
    private string? productoDescripcionAEliminar;

    private decimal? compraOficial;
    private decimal? ventaOficial;
    private decimal? compraBlue;
    private decimal? ventaBlue;

    protected override async Task OnInitializedAsync()
    {
        productos = await productoService.GetAllAsync();
        await CargarDolar();
    }

    private void AbrirModal()
    {
        modoEdicion = false;
        productoSeleccionado = null;
        showModal = true;
    }

    private void CerrarModal() => showModal = false;

    private async Task ProductoGuardado()
    {
        productos = await productoService.GetAllAsync();
        showModal = false;
        StateHasChanged();
    }

    private void EditarProducto(int id)
    {
        productoSeleccionado = productos.FirstOrDefault(p => p.Id == id);
        modoEdicion = true;
        showModal = true;
    }

    private void EliminarProducto(int id)
    {
        var producto = productos.FirstOrDefault(p => p.Id == id);
        if (producto == null) return;

        productoIdAEliminar = id;
        productoDescripcionAEliminar = producto.Descripcion;
        showConfirmModal = true;
    }

    private async Task ConfirmarEliminacion()
    {
        await productoService.DeleteAsync(productoIdAEliminar);
        productos = await productoService.GetAllAsync();

        showConfirmModal = false;
        StateHasChanged();
    }

    private void CancelarEliminacion()
    {
        showConfirmModal = false;
    }


    private async Task CargarDolar()
    {
        infoDolar = await productoService.GetDolarAsync();
        compraOficial = infoDolar.CompraOficial;
        ventaOficial = infoDolar.VentaOficial;
        compraBlue = infoDolar.CompraBlue;
        ventaBlue = infoDolar.VentaBlue;
    }

}
