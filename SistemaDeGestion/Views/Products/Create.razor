@page "/productos/create"
@using Services.Services
@using Services.ViewModels
@using SistemaGestion.Utils
@using Microsoft.AspNetCore.Components.Forms
@using SistemaGestion
@using System.ComponentModel.DataAnnotations
@inject ProductoService ProductoService
@inject SubCategoriaService SubCategoriaService

<h3>@(producto.Id == 0 ? "Nuevo Producto" : "Editar Producto")</h3>

<EditForm Model="@producto" OnValidSubmit="GuardarAsync" FormName="ProductoForm">
    <DataAnnotationsValidator />

    <div class="row">
        <!-- Descripción -->
        <div class="col-md-6 mb-3">
            <label class="form-label">Descripción</label>
            <InputText class="form-control" @bind-Value="producto.Descripcion" />
            <ValidationMessage For="@(() => producto.Descripcion)" />
        </div>

        <!-- Cantidad -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Cantidad</label>
            <InputNumber class="form-control" @bind-Value="producto.Cantidad" />
            <ValidationMessage For="@(() => producto.Cantidad)" />
        </div>

        <!-- Fecha de ingreso -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Fecha de ingreso</label>
            <InputDate class="form-control" @bind-Value="producto.FechaIngreso" />
            <ValidationMessage For="@(() => producto.FechaIngreso)" />
        </div>
    </div>

    <div class="row">
        <!-- Costos -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Costo (Pesos)</label>
            <InputNumber class="form-control" @bind-Value="producto.CostoPesos" />
            <ValidationMessage For="@(() => producto.CostoPesos)" />
        </div>

        <div class="col-md-3 mb-3">
            <label class="form-label">Costo (Dólar)</label>
            <InputNumber class="form-control" @bind-Value="producto.CostoDolar" />
            <ValidationMessage For="@(() => producto.CostoDolar)" />
        </div>

        <!-- Valores de venta -->
        <div class="col-md-3 mb-3">
            <label class="form-label">Valor Venta (Pesos)</label>
            <InputNumber class="form-control" @bind-Value="producto.ValorPesos" />
            <ValidationMessage For="@(() => producto.ValorPesos)" />
        </div>

        <div class="col-md-3 mb-3">
            <label class="form-label">Valor Venta (Dólar)</label>
            <InputNumber class="form-control" @bind-Value="producto.ValorDolar" />
            <ValidationMessage For="@(() => producto.ValorDolar)" />
        </div>
    </div>

    <div class="row">
        <!-- Fecha compra y valor dólar en el momento -->
        <div class="col-md-4 mb-3">
            <label class="form-label">Fecha de compra</label>
            <InputDate class="form-control" @bind-Value="producto.FechaCompra" />
            <ValidationMessage For="@(() => producto.FechaCompra)" />
        </div>

        <div class="col-md-4 mb-3">
            <label class="form-label">Valor dólar al momento</label>
            <InputNumber class="form-control" @bind-Value="producto.ValorDolarMomentoCompra" />
            <ValidationMessage For="@(() => producto.ValorDolarMomentoCompra)" />
        </div>

        <!-- Subcategoría -->
        <div class="col-md-4 mb-3">
            <label class="form-label">Subcategoría</label>
            <InputNumber class="form-control" @bind-Value="producto.SubCategoriaId" />
            <ValidationMessage For="@(() => producto.SubCategoriaId)" />
        </div>
    </div>

    <div class="row">
        <!-- Cliente o proveedor -->
        <div class="col-md-6 mb-3">
            <label class="form-label">Cliente / Proveedor ID</label>
            <InputNumber class="form-control" @bind-Value="producto.ClienteProveedorId" />
            <ValidationMessage For="@(() => producto.ClienteProveedorId)" />
        </div>

        <div class="col-md-3 mb-3">
            <label class="form-label">Categoría</label>
            <InputSelect class="form-select"
                         @bind-Value="producto.CategoriaId"
                         @bind-Value:event="oninput"
                         @onchange="OnCategoriaChanged">
                <option value="">Seleccione una categoría</option>
                @foreach (var cat in Categorias)
                {
                    <option value="@cat.Id">@cat.Descripcion</option>
                }
            </InputSelect>

            <ValidationMessage For="@(() => producto.CategoriaId)" />
        </div>

        <div class="col-md-3 mb-3">
            <label class="form-label">Sub categoría</label>
            <InputSelect class="form-control" @bind-Value="producto.SubCategoriaId">
                >
                <option value="">Seleccione una sub categoría</option>
                @foreach (var cat in SubCategorias)
                {
                    <option value="@cat.Id">@cat.Descripcion</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => producto.SubCategoriaId)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    [Parameter] public ProductoViewModel? ProductoExistente { get; set; }

    private ProductoViewModel producto = new();

    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public IEnumerable<CategoriaViewModel> Categorias { get; set; } = new List<CategoriaViewModel>();
    [Parameter] public IEnumerable<SubCategoriaViewModel> SubCategorias { get; set; } = new List<SubCategoriaViewModel>();


    protected override void OnParametersSet()
    {
        // Si se pasa un producto existente, lo clonamos al modelo local
        if (ProductoExistente != null)
        {
            producto = new ProductoViewModel
                {
                    Id = ProductoExistente.Id,
                    Descripcion = ProductoExistente.Descripcion,
                    Cantidad = ProductoExistente.Cantidad,
                    FechaIngreso = ProductoExistente.FechaIngreso,
                    CostoPesos = ProductoExistente.CostoPesos,
                    CostoDolar = ProductoExistente.CostoDolar,
                    ValorPesos = ProductoExistente.ValorPesos,
                    ValorDolar = ProductoExistente.ValorDolar,
                    FechaCompra = ProductoExistente.FechaCompra,
                    ValorDolarMomentoCompra = ProductoExistente.ValorDolarMomentoCompra,
                    SubCategoriaId = ProductoExistente.SubCategoriaId,
                    ClienteProveedorId = ProductoExistente.ClienteProveedorId
                };
        }
    }

    private async Task GuardarAsync()
    {
        if (producto.Id == 0)
            await ProductoService.CreateAsync(producto);
        else
            await ProductoService.UpdateAsync(producto);

        await OnSaved.InvokeAsync();
    }

    private async Task Cancelar()
    {
        await OnCancel.InvokeAsync();
    }
    private async Task OnCategoriaChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var categoriaId))
        {
            producto.CategoriaId = categoriaId;
            SubCategorias = (await SubCategoriaService.GetByCategoriaIdAsync(categoriaId)).ToList();
            producto.SubCategoriaId = null; // limpiar selección previa
        }
    }
}
